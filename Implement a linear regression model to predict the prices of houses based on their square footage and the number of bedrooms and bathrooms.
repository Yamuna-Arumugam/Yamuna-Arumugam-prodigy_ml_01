Sure, here's a simple Python code using the `scikit-learn` library to implement linear regression for predicting house prices based on square footage, number of bedrooms, and number of bathrooms:

```python
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Sample data: square footage, number of bedrooms, number of bathrooms, and corresponding prices
square_footage = np.array([1000, 1500, 2000, 2500, 3000]).reshape(-1, 1)
bedrooms = np.array([2, 3, 3, 4, 4]).reshape(-1, 1)
bathrooms = np.array([1, 2, 2, 2.5, 3]).reshape(-1, 1)
prices = np.array([200000, 300000, 400000, 450000, 550000])

# Concatenate features
features = np.concatenate((square_footage, bedrooms, bathrooms), axis=1)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, prices, test_size=0.2, random_state=42)

# Initialize and fit the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Calculate mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Predict the price of a new house with 1800 sqft, 3 bedrooms, and 2 bathrooms
new_house = np.array([1800, 3, 2]).reshape(1, -1)
predicted_price = model.predict(new_house)
print("Predicted Price for the New House:", predicted_price)
```

This code first defines sample data for square footage, number of bedrooms, number of bathrooms, and corresponding prices. Then, it concatenates the features, splits the data into training and testing sets, initializes and fits the linear regression model, predicts on the test set, calculates the mean squared error, and finally predicts the price of a new house with given features.
